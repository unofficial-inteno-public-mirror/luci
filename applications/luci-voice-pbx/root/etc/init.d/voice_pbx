#!/bin/sh /etc/rc.common
#
# This file is part of luci-voice-pbx,
# its purpose is to (re)create asterisk configuration files
# from luci config file(s).
#
. /lib/functions.sh

START=60

# Some global variables
SERIAL=$(cat /proc/nvram/SerialNumber)
BASEMAC=$(cat /proc/nvram/BaseMacAddr | sed 's/ //g')
MODULENAME=voice
USERAGENT="Inteno_${SERIAL}_${BASEMAC}"
DIAL_TIMEOUT=30

ASTUSER=nobody
ASTGROUP=nogroup
ASTDIRSRECURSIVE="/var/run/asterisk /var/log/asterisk /var/spool/asterisk"
ASTDIRS="/usr/lib/asterisk"

TEMPLATEDIR=/etc/asterisk_templates
ASTERISKDIR=/etc/asterisk
WORKDIR=/tmp/$MODULENAME.$$
MD5SUMSFILE=/tmp/$MODULENAME-sums.$$

#TODO: go through templates, check usage

TMPL_EXTENSIONS=$TEMPLATEDIR/extensions.conf.TEMPLATE
TMPL_EXTENSIONS_EXTRA=$TEMPLATEDIR/extensions_extra.conf.TEMPLATE
TMPL_EXTENSIONS_MACRO=$TEMPLATEDIR/extensions_macro.conf.TEMPLATE
TMPL_EXTENSIONS_PROVIDER=$TEMPLATEDIR/extensions_provider.TEMPLATE
TMPL_EXTENSIONS_INCOMING=$TEMPLATEDIR/extensions_incoming.TEMPLATE
TMPL_EXTENSIONS_INCOMING_LINE=$TEMPLATEDIR/extensions_incoming_line.TEMPLATE
TMPL_EXTENSIONS_LOCAL=$TEMPLATEDIR/extensions_local.TEMPLATE
TMPL_EXTENSIONS_DIRECT=$TEMPLATEDIR/extensions_direct.TEMPLATE
TMPL_EXTENSIONS_DIALTONE=$TEMPLATEDIR/extensions_dialtone.TEMPLATE

TMPL_SIP=$TEMPLATEDIR/sip.conf.TEMPLATE
TMPL_SIPPROVIDER=$TEMPLATEDIR/sip_provider.TEMPLATE
TMPL_SIPPROVIDERSEC=$TEMPLATEDIR/sip_provider_voicesec.TEMPLATE
TMPL_SIPREG=$TEMPLATEDIR/sip_registration.TEMPLATE
TMPL_SIPREGSEC=$TEMPLATEDIR/sip_registration_voicesec.TEMPLATE
TMPL_SIPUSER=$TEMPLATEDIR/sip_user.TEMPLATE
TMPL_RTP=$TEMPLATEDIR/rtp.conf.TEMPLATE
TMPL_STUN=$TEMPLATEDIR/res_stun_monitor.conf.TEMPLATE

TMPL_VOICEMAIL=$TEMPLATEDIR/voicemail.conf.TEMPLATE
TMPL_VOICEMAIL_MAILBOX=$TEMPLATEDIR/voicemail_mailbox.TEMPLATE

TMPL_QUEUES=$TEMPLATEDIR/queues.conf.TEMPLATE
TMPL_QUEUE=$TEMPLATEDIR/queue.TEMPLATE

TMPL_ASTERISK=$TEMPLATEDIR/asterisk.conf.TEMPLATE
TMPL_INDICATIONS=$TEMPLATEDIR/indications.conf.TEMPLATE
TMPL_LOGGER=$TEMPLATEDIR/logger.conf.TEMPLATE
TMPL_MANAGER=$TEMPLATEDIR/manager.conf.TEMPLATE
TMPL_MODULES=$TEMPLATEDIR/modules.conf.TEMPLATE
TMPL_FEATURES=$TEMPLATEDIR/features.conf.TEMPLATE
TMPL_CODECS=$TEMPLATEDIR/codecs.conf.TEMPLATE
TMPL_MUSICONHOLD=$TEMPLATEDIR/musiconhold.conf.TEMPLATE

TMPL_BRCM=$TEMPLATEDIR/brcm.conf.TEMPLATE
TMPL_BRCM_LINE=$TEMPLATEDIR/brcm_line.TEMPLATE

# Escape special characters in a string that is being passed to sed
escape_sed_substitution()
{
	echo "$@" | sed -e 's/[\/&]/\\&/g'
}

# Gets rid of any config files from $ASTERISKDIR not found in $WORKDIR.
clean_up_asterisk_config_dir()
{
        for f in $ASTERISKDIR/* ; do
                basef="`basename $f`"
                if [ ! -e "$WORKDIR/$basef" ] ; then
                        rm -rf "$f"
			echo "$f" >> /tmp/voice_pbx.log
                fi
        done
}

# Compares md5sums of the config files in $WORKDIR to those
# in $ASTERISKDIR, and copies only changed files over to reduce
# wear on flash in embedded devices.
compare_configs_and_copy_changed()
{
	# First, compute md5sums of the config files in $WORKDIR.
	cd $WORKDIR/
	md5sum * > $MD5SUMSFILE

	# Now, check the files in $ASTERISKDIR against the md5sums.
	cd $ASTERISKDIR/
	changed_files="`md5sum -c $MD5SUMSFILE 2>/dev/null | fgrep ": FAILED" | awk -F: '{print $1}'`"

	rm -f $MD5SUMSFILE

	[ -z "$changed_files" ] && return

	# Now copy over the changed files.
	for f in $changed_files ; do
		cp "$WORKDIR/$f" "$ASTERISKDIR/$f"
	done
}

# Calls the functions that create the final config files
# Calls the function which compares which files have changed
# Puts the final touches on $ASTERISKDIR
# Gets rid of $WORKDIR
assemble_and_copy_config()
{
	mkdir -p $ASTERISKDIR

	# Touch all the included files, to prevent asterisk from refusing to
	# start if a config item is missing and an included config file isn't created.

	# Copy the template files which we don't edit.
	cp $TMPL_ASTERISK		$WORKDIR/asterisk.conf
	cp $TMPL_INDICATIONS		$WORKDIR/indications.conf
	cp $TMPL_MANAGER		$WORKDIR/manager.conf
	cp $TMPL_MODULES		$WORKDIR/modules.conf
	cp $TMPL_EXTENSIONS_MACRO	$WORKDIR/extensions_macro.conf
	cp $TMPL_MUSICONHOLD		$WORKDIR/musiconhold.conf

	# Handle extensions_extra, carry over old file to new config if there is one
	if [ -e "$ASTERISKDIR/extensions_extra.conf" ] ; then
		cp $ASTERISKDIR/extensions_extra.conf	$WORKDIR/extensions_extra.conf
	else
		cp $TMPL_EXTENSIONS_EXTRA		$WORKDIR/extensions_extra.conf
	fi

	# Create config files from the temporary files we have built
	mv $WORKDIR/sip.tmp			$WORKDIR/sip.conf
	mv $WORKDIR/sip_registrations.tmp	$WORKDIR/sip_registrations.conf
	mv $WORKDIR/sip_providers.tmp		$WORKDIR/sip_providers.conf
	mv $WORKDIR/sip_users.tmp		$WORKDIR/sip_users.conf
	mv $WORKDIR/brcm.tmp			$WORKDIR/brcm.conf
	mv $WORKDIR/extensions.tmp		$WORKDIR/extensions.conf
	mv $WORKDIR/codecs.tmp			$WORKDIR/codecs.conf
	mv $WORKDIR/rtp.tmp			$WORKDIR/rtp.conf
	mv $WORKDIR/res_stun_monitor.tmp	$WORKDIR/res_stun_monitor.conf
	mv $WORKDIR/features.tmp		$WORKDIR/features.conf
	mv $WORKDIR/voicemail.tmp		$WORKDIR/voicemail.conf
        mv $WORKDIR/logger.tmp			$WORKDIR/logger.conf
	mv $WORKDIR/queues.tmp			$WORKDIR/queues.conf

	# At this point, $WORKDIR should contain a complete, working config.
	clean_up_asterisk_config_dir

	compare_configs_and_copy_changed

	[ ! -d $ASTERISKDIR/manager.d ] && mkdir -p $ASTERISKDIR/manager.d/

	# Get rid of the working directory
	rm -rf $WORKDIR
}


# read configured codecs for a Line section
# returns a list of found codecs, formatted to replace a tag with sed
read_codecs()
{
	local codec_allow=""
	local codec

	for i in 0 1 2 3 4 5; do
		config_get codec "$1" "codec$i"
		if [ "$codec" == "-" ] || [ -z "$codec" ]; then
			break
		fi
		codec_allow=$codec_allow"allow = $codec\\n"
	done
	echo $codec_allow
}

# read lines that should receive incoming calls from a SIP Provider
# returns a list of lines, formatted to replace a tag with sed
# in a Dial() command
read_lines()
{
	local lines=""
	local call_lines
	config_get call_lines $1 call_lines
	for i in $call_lines ; do
		lines=$lines"$i&"
	done
	lines=$(escape_sed_substitution $lines)
	echo "${lines%??}"
}

configure_sip()
{
	echo "Configuring SIP"
	local useragent
	local externhost
	local bindport
	local rtpstart
	local rtpend
	local dtmfmode
	local blindxfer
	local defaultexpiry
	local registertimeout
	local registerattempts
	local remotehold
	local tos_sip
	local tos_audio
	local tos_video
	local tos_text
	local realm
	local localnet
	local stun_server

	config_get useragent $1 useragent
	config_get externhost $1 externhost
	config_get bindport $1 bindport
	config_get rtpstart $1 rtpstart
	config_get rtpend $1 rtpend
	config_get dtmfmode $1 dtmfmode
	config_get blindxfer $1 blindxfer
	config_get defaultexpiry $1 defaultexpiry
	config_get registertimeout $1 registertimeout
	config_get registerattempts $1 registerattempts
	config_get register403timeout $1 register403timeout
	config_get remotehold $1 remotehold
	config_get tos_sip $1 tos_sip
	config_get tos_audio $1 tos_audio
	config_get tos_video $1 tos_video
	config_get tos_text $1 tos_text
	config_get realm $1 realm
	config_get localnet $1 localnet
	config_get stun_server $1 stun_server

	[ -z "$useragent" ] && useragent="$USERAGENT"

	sed -i "s/|USERAGENT|/$(escape_sed_substitution $useragent)/g"		$WORKDIR/sip.tmp
	sed -i "s/|DTMFMODE|/$dtmfmode/"		$WORKDIR/sip.tmp

	if [ -z "$externhost" ] ; then
		sed -i "s/externhost=|EXTERNHOST|/;externhost=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|EXTERNHOST|/$externhost/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$bindport" ] ; then
		sed -i "s/bindport=|BINDPORT|/;bindport=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|BINDPORT|/$bindport/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$defaultexpiry" ] ; then
		sed -i "s/|DEFAULTEXPIRY|/300/g"				$WORKDIR/sip.tmp
	else
		sed -i "s/|DEFAULTEXPIRY|/$defaultexpiry/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$registertimeout" ] ; then
		sed -i "s/registertimeout=|REGISTERTIMEOUT|/;registertimeout=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|REGISTERTIMEOUT|/$registertimeout/g"				$WORKDIR/sip.tmp
	fi

	if [ -z "$registerattempts" ] ; then
		sed -i "s/registerattempts=|REGISTERATTEMPTS|/;registerattempts=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|REGISTERATTEMPTS|/$registerattempts/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$register403timeout" ] ; then
		sed -i "s/register403timeout=|REGISTER403TIMEOUT|/;register403timeout=/g" $WORKDIR/sip.tmp
	else
		sed -i "s/|REGISTER403TIMEOUT|/$register403timeout/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$remotehold" ] ; then
		sed -i "s/remotehold=|REMOTEHOLD|/;remotehold=/g"			$WORKDIR/sip.tmp
	else
		sed -i "s/|REMOTEHOLD|/$remotehold/g"					$WORKDIR/sip.tmp
	fi

	# Set Differentiated Services values (optional)
	if [ -z "$tos_sip" ] ; then
		sed -i "s/tos_sip=|TOS_SIP|/;tos_sip=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_SIP|/$(escape_sed_substitution $tos_sip)/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_audio" ] ; then
		sed -i "s/tos_audio=|TOS_AUDIO|/;tos_audio=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_AUDIO|/$(escape_sed_substitution $tos_audio)/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_video" ] ; then
		sed -i "s/tos_video=|TOS_VIDEO|/;tos_video=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_VIDEO|/$(escape_sed_substitution $tos_video)/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_text" ] ; then
		sed -i "s/tos_text=|TOS_TEXT|/;tos_text=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_TEXT|/$(escape_sed_substitution $tos_text)/g"		$WORKDIR/sip.tmp
	fi

	# Set RTP port range
	sed -i "s/|RTPSTART|/$rtpstart/"		$WORKDIR/rtp.tmp
	sed -i "s/|RTPEND|/$rtpend/"			$WORKDIR/rtp.tmp

	# Set blind transfer key
	cp $TMPL_FEATURES				$WORKDIR/features.tmp
	sed -i "s/|BLINDXFER|/$(escape_sed_substitution $blindxfer)/"		$WORKDIR/features.tmp

	#Set realm
	if [ -z "$realm" ] ; then
		realm=asterisk
	fi
	sed -i "s/|REALM|/$(escape_sed_substitution $realm)/g"		$WORKDIR/sip.tmp

	#Add localnets
	if [ -n "$localnet" ] ; then
		for i in $localnet ; do
			echo "Adding localnet $i"
			echo "localnet=$i" >> $WORKDIR/sip.tmp
		done
	fi

	# STUN server
	sed -i "s/|SERVER|/$stun_server/"	$WORKDIR/res_stun_monitor.tmp
}

# Get password from existing sip_providers config file
# $1 is SIP Provider to get password for
restore_secret()
{
	local section_found
	local secret
	if [ -f "$ASTERISKDIR/sip_providers.conf" ] ; then
		while read line
		do
			if [ -n "$section_found" ] ; then
				if [ ! "${line##secret*}" ] ; then
					#we found the secret
					secret=$(echo $line | sed 's/secret[ \t]*= *//g' | sed 's/[ \t;].*//g')
					echo $secret
					return
				fi
			elif [ "$line" = "[$1]" ] ; then
				#we found the correct section
				section_found=1
			fi
		done < $ASTERISKDIR/sip_providers.conf
	fi
}

# Get PIN code for a mailbox from asterisk voicemail config file
# $1 is the extension for the mailbox to get PIN for
restore_pin()
{
	local section_found
	local secret
	if [ -f "$ASTERISKDIR/voicemail.conf" ] ; then
		while read line
		do
			if [ -n "$section_found" ] ; then
				if [ ! "${line##$1*}" ] ; then
					# We found the mailbox
					pin=$(echo $line | sed 's/;*[0-9]* => \([0-9]*\).*/\1/')
					echo $pin
					return
				fi
			elif [ "$line" = "[default]" ] ; then
				# We found the correct section
				section_found=1
			fi
		done < $ASTERISKDIR/voicemail.conf
	fi
}

#
# configure_sip_provider()
# Add a SIP provider to sip_providers.conf and sip_registrations.conf based on provided input:
#
configure_sip_provider()
{
	local enabled
	local domain
	local host
	local port
	local outboundproxy
	local outboundproxyport
	local user
	local authuser
	local secret
	local is_fax

	config_get enabled $1 enabled
	config_get domain $1 domain
	config_get host $1 host
	config_get port $1 port
	config_get outboundproxy $1 outboundproxy
	config_get outboundproxyport $1 outboundproxyport
	config_get user $1 user
	config_get authuser $1 authuser
	config_get secret $1 secret
	config_get is_fax $1 is_fax

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	if [ -z "$user" ] ; then
		return
	fi

	echo "Configuring SIP Provider $1"

	if [ -z "$host" ] ; then
		host=$domain
	fi

	# Get secret from existing asterisk config if its not set in luci config
	if [ -z "$secret" ] ; then
		echo "Restoring secret from old config for $1"
		secret=$(restore_secret $1)
	fi

	# Select register template based on precence of voicesec util
	if [ -e /usr/bin/voicesec ] ; then
		cp "$TMPL_SIPPROVIDERSEC" "$WORKDIR/sip_provider.tmp"
		cp "$TMPL_SIPREGSEC" "$WORKDIR/sip_reg.tmp"
	else
		cp "$TMPL_SIPPROVIDER" "$WORKDIR/sip_provider.tmp"
		cp "$TMPL_SIPREG" "$WORKDIR/sip_reg.tmp"
	fi

	# Construct a sip peer entry for SIP Provider
	sed -i "s/|NAME|/$1/g"				$WORKDIR/sip_provider.tmp
	sed -i "s/|AUTHUSER|/$(escape_sed_substitution $authuser)/g"		$WORKDIR/sip_provider.tmp
	sed -i "s/|USER|/$(escape_sed_substitution $user)/"			$WORKDIR/sip_provider.tmp
	sed -i "s/|SECRET|/$(escape_sed_substitution $secret)/"			$WORKDIR/sip_provider.tmp
	sed -i "s/|HOST|/$host/"			$WORKDIR/sip_provider.tmp
	sed -i "s/|FROMDOMAIN|/$domain/"		$WORKDIR/sip_provider.tmp

	# Set or remove port
	if [ -z "$port" ] ; then
		sed -i "s/port=|PORT|//g"		$WORKDIR/sip_provider.tmp
	else
		sed -i "s/|PORT|/$port/g"		$WORKDIR/sip_provider.tmp
	fi

	# Set or remove outboundproxy
	if [ -z "$outboundproxy" ] ; then
		sed -i "s/outboundproxy=|OUTBOUNDPROXY|//g"	$WORKDIR/sip_provider.tmp
	else
		sed -i "s/|OUTBOUNDPROXY|/$outboundproxy/g"	$WORKDIR/sip_provider.tmp
	fi

	# Set or remove outboundproxyport
	if [ -z "$outboundproxyport" ] ; then
		sed -i "s/|OUTBOUNDPROXYPORT|//g"	$WORKDIR/sip_provider.tmp
	else
		sed -i "s/|OUTBOUNDPROXYPORT|/:$outboundproxyport/g"	$WORKDIR/sip_provider.tmp
	fi

	# Force ulaw/alaw if fax, otherwise read selected codecs
	if [ -z "$is_fax" -o "$is_fax" = "1" ] ; then
		sed -i "s/|ALLOW|/allow = ulaw\nallow = alaw/"	$WORKDIR/sip_provider.tmp
	else
		sed -i "s/|ALLOW|/$(read_codecs $1)/"		$WORKDIR/sip_provider.tmp
	fi

	# Set registered extension so that incoming calls match the correct peer                     
	sed -i "s/|CONTACT_USER|/$user/g"			$WORKDIR/sip_provider.tmp 

	# Add SIP Provider configuration to the temp file containing all SIP Provider configs.
	cat $WORKDIR/sip_provider.tmp >> $WORKDIR/sip_providers.tmp

	# Register SIP Provider with SIP Service Provider
	sed -i "s/|PROVIDER|/$1/g"			$WORKDIR/sip_reg.tmp	
	sed -i "s/|USER|/$(escape_sed_substitution $user)/g"			$WORKDIR/sip_reg.tmp
	sed -i "s/|SECRET|/$(escape_sed_substitution $secret)/"			$WORKDIR/sip_reg.tmp
	sed -i "s/|DOMAIN|/$domain/"			$WORKDIR/sip_reg.tmp
	if [ -n "$authuser" ] ; then
		sed -i "s/|AUTHUSER|/:$(escape_sed_substitution $authuser)/"	$WORKDIR/sip_reg.tmp
	else
		sed -i "s/|AUTHUSER|//"			$WORKDIR/sip_reg.tmp
	fi
	if [ -n "$port" ] ; then
		sed -i "s/|PORT|/:$port/"		$WORKDIR/sip_reg.tmp
	else
		sed -i "s/|PORT|//"			$WORKDIR/sip_reg.tmp
	fi
	sed -i "s/|CONTACT_USER|/$user/g"	$WORKDIR/sip_reg.tmp

	# Add SIP Provider registration info to temp file containing all SIP Provider registrations
	cat $WORKDIR/sip_reg.tmp >> $WORKDIR/sip_registrations.tmp

	# Clean up temporary files
	rm -f $WORKDIR/sip_provider.tmp
	rm -f $WORKDIR/sip_reg.tmp
}

#Encrypt passwords if voicesec is used, remove cleartext password from config
encrypt_password()
{
	local secret
	config_get secret $1 secret

	if [ -n "$secret" ] ; then
		if [ -e /usr/bin/voicesec ] ; then
			echo "Encrypting password for $1"
			/usr/bin/voicesec -e $secret > /usr/lib/asterisk/voicesec_$1
		fi
		uci_remove voice_pbx $1 secret
		uci_commit voice_pbx
	fi
}

#
# Configure mailbox
#
configure_mailbox()
{
	local pin
	local enabled
	local user
	local extension

	config_get pin $1 pin
	config_get enabled $1 enabled
	config_get user $1 user

	local cfgtype	
	config_get cfgtype "$user" TYPE
	if [ "$cfgtype" == "sip_service_provider" ] ; then
		config_get extension $user user
	else
		config_get extension $user extension
	fi

	if [ -z "$pin" ] ; then
		pin=$(restore_pin $extension)
	fi
		
	echo "Setting up Mailbox for User $user"
	cp "$TMPL_VOICEMAIL_MAILBOX" "$WORKDIR/mailbox.tmp"

	# Construct a mailbox
	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		# Comment out the mailbox entry.
		# This allows us to keep the PIN code once the mailbox is re-enabled
		sed -i "s/|ENABLED|/;/g"		$WORKDIR/mailbox.tmp
	else
		sed -i "s/|ENABLED|//g"			$WORKDIR/mailbox.tmp
	fi
	sed -i "s/|EXTENSION|/$extension/g"	$WORKDIR/mailbox.tmp
	sed -i "s/|PIN|/$pin/g"				$WORKDIR/mailbox.tmp

	cat $WORKDIR/mailbox.tmp >> $WORKDIR/voicemail.tmp
	rm -f $WORKDIR/mailbox.tmp
}

#
# Check if an enabled mailbox exists for the given user
#
mailbox_check_enabled()
{
	[ "$#" -ge 1 ] || return 0

	local section cfgtype mailbox_user
	[ -z "$CONFIG_SECTIONS" ] && return 0
	for section in ${CONFIG_SECTIONS}; do
		config_get cfgtype "$section" TYPE
		[ -n "mailbox" -a "x$cfgtype" != "xmailbox" ] && continue
		config_get mailbox_user $section user
		if [ "$mailbox_user" = "$1" ] ; then
			local enabled
			config_get enabled $section enabled
			echo "$enabled"
			break
		fi
	done
}

#
# Configure IVR
#
configure_ivr()
{
	local name
	local enabled
	local extension
	local sound_file

	config_get name $1 name
	config_get enabled $1 enabled
	config_get extension $1 extension
	config_get sound_file $1 sound_file

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi
	
	echo "Configuring IVR $name"
	echo "[$1]" >> 										$WORKDIR/ivrs.tmp
	echo "exten => $extension,1,Answer()" >>						$WORKDIR/extensions_local.tmp
	echo "exten => $extension,n,Goto($1,s,1)" >>						$WORKDIR/extensions_local.tmp

	# Find all tone selections belonging to the IVR being configured
	local section cfgtype
	num_selections=0
	[ -z "$CONFIG_SECTIONS" ] && return 0
	for section in ${CONFIG_SECTIONS}; do
		config_get cfgtype "$section" TYPE
		[ -n "tone_selection" -a "x$cfgtype" != "xtone_selection" ] && continue
		local ts_owner ts_enabled ts_user ts_number ts_extension

		config_get ts_owner $section owner
		config_get ts_enabled $section enabled
		config_get ts_user $section user
		config_get ts_number $section number

		if [ "$ts_owner" = "$1" ] ; then
			if [ -z "$ts_enabled" -o "$ts_enabled" = "0" ] ; then
				continue
			fi

			config_get ts_extension $ts_user extension
			if [ -z "$ts_extension" ] ; then
				echo "User $ts_user has no extension"
				continue
			fi
			echo "exten => $ts_number,1,Goto(local_extensions,$ts_extension,1)" >>	$WORKDIR/ivrs.tmp
			num_selections=$((num_selection+1))
		fi
	done

	if [ $num_selections -eq 0 ] ; then
		echo "exten => s,1,Playback(/usr/lib/asterisk/recordings/$sound_file)" >>	$WORKDIR/ivrs.tmp
		echo "exten => s,n,Goto(hangup,h,2)" >>						$WORKDIR/ivrs.tmp
	else
		echo "exten => s,1,Background(/usr/lib/asterisk/recordings/$sound_file)" >>	$WORKDIR/ivrs.tmp
		echo "exten => s,n,WaitExten(10)" >>						$WORKDIR/ivrs.tmp
		echo "exten => i,1,Goto($1,s,1)" >>						$WORKDIR/ivrs.tmp
		echo "exten => t,1,Goto($1,s,1)" >>						$WORKDIR/ivrs.tmp
	fi
	echo "" >>										$WORKDIR/ivrs.tmp
}

#
# Configure Call Queue
#
configure_queue()
{
	local name enabled strategy extension members

	config_get name $1 name
	config_get enabled $1 enabled
	config_get strategy $1 strategy
	config_get extension $1 extension
	config_get members $1 members

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		continue
	fi

	echo "Configuring Call Queue $name"

	echo "exten => $extension,1,Answer()"			>> $WORKDIR/extensions_local.tmp
	echo "exten => $extension,n,Background(dir-welcome)"	>> $WORKDIR/extensions_local.tmp
	echo "exten => $extension,n,Queue($1)"			>> $WORKDIR/extensions_local.tmp

	
	cp "$TMPL_QUEUE" "$WORKDIR/queue.tmp"
	sed -i "s/|SECTION|/$1/g"				$WORKDIR/queue.tmp
	sed -i "s/|STRATEGY|/$strategy/g"			$WORKDIR/queue.tmp

	for member in $(echo $members | tr " ")
	do
		local out=""
		re='^[0-9]+$'
		num=${member#brcm}
		if [ -z "${num##[0-9]*}" ] ; then
			out="BRCM/$num"
		else
			local sip_user
			config_get sip_user $member user
			if ! [ -z $sip_user ] ; then
				out="SIP/$sip_user"
			fi
		fi
		if ! [ -z $out ] ; then
			echo "member => $out"			>> $WORKDIR/queue.tmp
		fi
	done

	cat $WORKDIR/queue.tmp					>> $WORKDIR/queues.tmp
	rm -f							$WORKDIR/queue.tmp
}

#
# Configure SIP user
#
configure_sip_user()
{
	local enabled
	local name
	local extension
	local user
	local secret
	local qualify
	local host
	local sip_provider

	config_get enabled $1 enabled
	config_get name $1 name
	config_get extension $1 extension
	config_get user $1 user
	config_get secret $1 secret
	config_get qualify $1 qualify
	config_get host $1 host
	config_get sip_provider $1 sip_provider

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	if [ -z "$user" ] ; then
		echo "SIP user has no username configured, ignored"
		return
	fi

	#If no sip_provider is configured, use local_extensions context
	local provider_enabled
	local provider_user
	if [ "$sip_provider" == "-" ] ; then
		sip_provider="local_extensions"
	else
		config_get provider_enabled $sip_provider enabled
		config_get provider_user $sip_provider user
		if [ -z "$provider_enabled" -o "$provider_enabled" = "0" -o -z "$provider_user" ] ; then
			sip_provider="local_extensions"
		fi
	fi

	#Use dynamic host as default
	if [ -z "$host" ] ; then
		host=dynamic
	fi

	#Use default value for qualify
	if [ -z "$qualify" ] ; then
		qualify=yes
	fi

	echo "Configuring SIP User $user"
	cp "$TMPL_SIPUSER" "$WORKDIR/sip_user.tmp"
	
	# Construct a sip peer entry for user
	sed -i "s/|NAME|/$(escape_sed_substitution $name)/g"		$WORKDIR/sip_user.tmp
	sed -i "s/|EXTENSION|/$extension/g"				$WORKDIR/sip_user.tmp
	sed -i "s/|USER|/$(escape_sed_substitution $user)/g"		$WORKDIR/sip_user.tmp
	sed -i "s/|SECRET|/$(escape_sed_substitution $secret)/g"	$WORKDIR/sip_user.tmp
	sed -i "s/|HOST|/$host/g"					$WORKDIR/sip_user.tmp
	sed -i "s/|QUALIFY|/$qualify/g"					$WORKDIR/sip_user.tmp
	sed -i "s/|CONTEXT|/$sip_provider/g"				$WORKDIR/sip_user.tmp
	sed -i "s/|ALLOW|/$(read_codecs $1)/"				$WORKDIR/sip_user.tmp

	# Add SIP User configuration to the temp file containing all SIP User configs.
	cat $WORKDIR/sip_user.tmp >> $WORKDIR/sip_users.tmp
	rm -f $WORKDIR/sip_user.tmp
}

#
# Install call filter macros
#
configure_call_filter()
{
	configure_call_filter_helper $1 "incoming"
	echo "" >>						$WORKDIR/call_filter_macros.tmp
	configure_call_filter_helper $1 "outgoing"
	echo "" >>						$WORKDIR/call_filter_macros.tmp
}

#
# Helper function used by configure_call_filter
#
configure_call_filter_helper()
{
	local sip_provider filter_mode goto_label
	[ "$#" -ge 2 ] || return 0
	
	direction=$2
	if ! [ "x$direction" != "xincoming" -o "x$direction" != "xoutgoing" ] ; then
		return
	fi

	echo "[macro-$1-$direction-call-filter]" >>		$WORKDIR/call_filter_macros.tmp
	echo "exten => s,1,Set(CALL_BLOCKED=0)" >>		$WORKDIR/call_filter_macros.tmp

	config_get filter_mode $1 $direction
	if [ "x$filter_mode" == "xblacklist" ] ; then
		goto_label="block"
	fi
	if [ "x$filter_mode" == "xwhitelist" ] ; then
		goto_label="pass"
	fi

	if [ -z $goto_label ] ; then
		return
	fi

	local section cfgtype owner tmp
	for section in ${CONFIG_SECTIONS}; do
		config_get cfgtype "$section" TYPE
		[ "x$cfgtype" != "xcall_filter_rule" ] && continue
		config_get owner $section owner
		if [ "x$owner" == "x$1" ] ; then
			local rule_direction rule_user rule_extension rule_enabled
			config_get rule_direction $section direction
			config_get rule_user $section user
			config_get rule_extension $section extension
			config_get rule_enabled $section enabled

			[ "x$rule_direction" != "x$direction" ] && continue

			[ -z "$rule_enabled" -o "$rule_enabled" = "0" ] && continue
		
			if [ "x$rule_direction" == "xoutgoing" ] ; then
				if [ "x$rule_user" == "x*" ] ; then
					tmp="exten => s,n,GotoIf($[\"\${DIAL_EXTEN}\"=\"$rule_extension\"]?$goto_label)"
					echo $tmp >>		$WORKDIR/call_filter_macros.tmp
				else
					tmp="exten => s,n,GotoIf($[$[\"\${DIAL_EXTEN}\"=\"$rule_extension\"] &"
					tmp="$tmp $[\"\${CHANNEL}\":\"$rule_user/[0-9]+|$rule_user-[0-9]+\">0]]?$goto_label)"
					echo $tmp >>		$WORKDIR/call_filter_macros.tmp
				fi
			fi
			
			if [ "x$rule_direction" == "xincoming" ] ; then
				tmp="exten => s,n,GotoIf($[\"\${CALLERID(num)}\"=\"$rule_extension\"]?$goto_label)"
				echo $tmp >>			$WORKDIR/call_filter_macros.tmp
			fi
		fi
	done
	
	if [ "x$filter_mode" == "xblacklist" ] ; then
		echo "exten => s,n,Goto(pass)" >>		$WORKDIR/call_filter_macros.tmp
	fi
	echo "exten => s,n(block),Set(CALL_BLOCKED=1)" >>	$WORKDIR/call_filter_macros.tmp
	echo "exten => s,n(pass),NoOp()" >>			$WORKDIR/call_filter_macros.tmp
}

#
# Configure dialplan special features
#
configure_extensions()
{
	echo "Configuring Dialplan"
	local custom_incoming_enabled
	local custom_hangup_enabled
	local callforward_enabled
	local extension_all_ports
	local test_audio_extension
	local test_echo_extension
	local record_message

	config_get custom_incoming_enabled custom_dialplan custom_incoming_enabled
	config_get custom_hangup_enabled custom_dialplan custom_hangup_enabled
	config_get extension_all_ports custom_dialplan all_ports_extension
	config_get test_audio_extension custom_dialplan test_audio_extension
	config_get test_echo_extension custom_dialplan test_echo_extension
	config_get callforward_enabled features callforward_enabled
	config_get record_message features record_message

	if [ -z "$custom_incoming_enabled" -o "$custom_incoming_enabled" = "0" ] ; then
		sed -i "s/|CUSTOM_INCOMING|/NoOp()/"					$WORKDIR/extensions.tmp
	else
		sed -i "s/|CUSTOM_INCOMING|/Macro(custom-incoming)/"			$WORKDIR/extensions.tmp
	fi

	if [ -z "$custom_hangup_enabled" -o "$custom_hangup_enabled" = "0" ] ; then
		sed -i "s/|CUSTOM_HANGUP|/Playback(beep)/"				$WORKDIR/extensions.tmp
	else
		sed -i "s/|CUSTOM_HANGUP|/Macro(custom-hangup)/"			$WORKDIR/extensions.tmp
	fi

	if [ -n "$callforward_enabled" -a "$callforward_enabled" = "1" ] ; then
		sed -i "s/|INCOMING_HANDLER|/Macro(callhandler,\${CHANNEL(peername)})/"	$WORKDIR/extensions.tmp
	else
		sed -i "s/|INCOMING_HANDLER|/Goto(call_line,\${EXTEN},1))/"		$WORKDIR/extensions.tmp
	fi

	if [ -n "$extension_all_ports" ] ; then
		local all_lines="BRCM/0&BRCM/1&BRCM/2&BRCM/3&BRCM/4&BRCM/5&BRCM/6"
		echo "exten => $extension_all_ports,1,Dial($all_lines)"		>> $WORKDIR/extensions_local.tmp
		echo "exten => $extension_all_ports,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
	fi

	if [ -n "$test_audio_extension" ] ; then
		echo "exten => $test_audio_extension,1,Playback(tt-monkeys)"	>> $WORKDIR/extensions_local.tmp
		echo "exten => $test_audio_extension,n,Hangup()"		>> $WORKDIR/extensions_local.tmp
	fi

	if [ -n "$test_echo_extension" ] ; then
		echo "exten => $test_echo_extension,1,Echo()"			>> $WORKDIR/extensions_local.tmp
		echo "exten => $test_echo_extension,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
	fi

	
	if [ -n "$record_message" ] ; then
		echo "exten => $record_message,1,Playback(beep)"		>> $WORKDIR/extensions_local.tmp
		echo "exten => $record_message,n,Record(\"/usr/lib/asterisk/recordings/user-recording\${STRFTIME(\${EPOCH},,%C%y%m%d-%T)}.gsm)"	>> $WORKDIR/extensions_local.tmp
		echo "exten => $record_message,n,Playback(auth-thankyou)"	>> $WORKDIR/extensions_local.tmp
		echo "exten => $record_message,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
	fi
}

#
# Create dialplan settings for each enabled SIP Provider
#
configure_extensions_provider()
{
	local enabled
	local displayname
	local user
	local cbbs_key
	local cbbs_maxretry
	local cbbs_retrytime
	local cbbs_waittime
	local cfim_on
	local cfim_off
	local cfbs_on
	local cfbs_off
	local call_return
	local redial
	local custom_outgoing
	local incoming_lines
	local direct_dial
	local congestiontone

	local callforward_enabled
	local cbbs_enabled
	local callreturn_enabled
	local redial_enabled	

	# load general settings
	config_get callforward_enabled "features" callforward_enabled
	config_get cbbs_enabled "features" cbbs_enabled
	config_get callreturn_enabled "features" callreturn_enabled
	config_get redial_enabled "features" redial_enabled

	# check if SIP Provider is disabled
	config_get enabled $1 enabled
	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	# check that SIP Provider has a configured user
	config_get user $1 user
	if [ -z "$user" ] ; then
		return
	fi

	echo "Configuring dialplan for SIP Provider $1"

	config_get displayname $1 displayname
	[ -z "$displayname" ] && displayname=$user
	config_get custom_outgoing custom_dialplan custom_outgoing_enabled
	if [ -z "$custom_outgoing" -o "$custom_outgoing" = "0" ] ; then
		custom_outgoing="NoOp()"
	else
		custom_outgoing="Macro(custom-outgoing)"
	fi

	# check call filters for outgoing calls
	local call_filter call_filter_macro call_filter_enabled
	call_filter_macro="Set(CALL_BLOCKED=0)"
	config_get call_filter $1 call_filter
	if ! [ -z "$call_filter" ] ; then
		# check if call filter is enabled
		config_get call_filter_enabled $call_filter enabled
		if [ "x$call_filter_enabled" = "x1" ] ; then
			call_filter_macro="Macro($call_filter-outgoing-call-filter)"
		fi	
	fi
		
	#Set congestion tone (default to congestion)
	config_get congestiontone "SIP" congestiontone
	if [ -z "$congestiontone" ] ; then
		congestiontone=congestion
	fi

	# load cbbs settings if enabled
	if [ -z "$cbbs_enabled" -o "$cbbs_enabled" = "0" ] ; then
		cbbs_key=""
		cbbs_maxretry="0"
		cbbs_retrytime="0"
		cbbs_waittime="0"
	else
		config_get cbbs_key $1 cbbs_key
		config_get cbbs_maxretry $1 cbbs_maxretry
		config_get cbbs_retrytime $1 cbbs_retrytime
		config_get cbbs_waittime $1 cbbs_waittime
	fi

	# load call forwarding etc settings
	config_get cfim_on $1 cfim_on
	config_get cfim_off $1 cfim_off
	config_get cfbs_on $1 cfbs_on
	config_get cfbs_off $1 cfbs_off
	config_get call_return $1 call_return
	config_get redial $1 redial

	local cfim_on_len=${#cfim_on}
	local cfbs_on_len=${#cfbs_on}
	[ -z "$cfim_on" ] && cfim_on="cfimon"
	[ -z "$cfim_off" ] && cfim_off="cfimoff"
	[ -z "$cfbs_on" ] && cfbs_on="cfbson"
	[ -z "$cfbs_off" ] && cfbs_off="cfbsoff"
	[ -z "$call_return" ] && call_return="callreturn"
	[ -z "$redial" ] && redial="redial"

	# create tempfile for outgoing, transfer and callforwarding contexts
	cp $TMPL_EXTENSIONS_PROVIDER			$WORKDIR/extensions_provider.tmp
	
	#common settings
	sed -i "s/|PROVIDER|/$1/g"			$WORKDIR/extensions_provider.tmp
	sed -i "s/|CUSTOM_OUTGOING|/$custom_outgoing/"	$WORKDIR/extensions_provider.tmp
	sed -i "s/|CALL_FILTER|/$call_filter_macro/"	$WORKDIR/extensions_provider.tmp
	sed -i "s/|DISPLAYNAME|/$(escape_sed_substitution $displayname)/"		$WORKDIR/extensions_provider.tmp

	#cbbs settings
	sed -i "s/|CBBS_KEY|/$(escape_sed_substitution $cbbs_key)/"		$WORKDIR/extensions_provider.tmp
	sed -i "s/|MAX_RETRIES|/$cbbs_maxretry/"	$WORKDIR/extensions_provider.tmp
	sed -i "s/|RETRYTIME|/$cbbs_retrytime/"		$WORKDIR/extensions_provider.tmp
	sed -i "s/|WAITTIME|/$cbbs_waittime/"		$WORKDIR/extensions_provider.tmp
	sed -i "s/|CONGESTIONTONE|/$congestiontone/"	$WORKDIR/extensions_provider.tmp

	# Confifure call forwarding if enabled
	if [ -n "$callforward_enabled" -a "$callforward_enabled" = "1" ] ; then
		echo "exten => $cfim_on,1,	Macro(create_cfim,$1,\${REPLACE(EXTEN:$cfim_on_len,*#-)})" >>	$WORKDIR/extensions_provider.tmp
		echo "exten => $cfim_off,1,	Macro(delete_cfim,$1)" >>					$WORKDIR/extensions_provider.tmp
		echo "exten => $cfbs_on,1,	Macro(create_cfbs,$1,\${REPLACE(EXTEN:$cfbs_on_len,*#-)})" >>	$WORKDIR/extensions_provider.tmp
		echo "exten => $cfbs_off,1,	Macro(delete_cfbs,$1)" >>					$WORKDIR/extensions_provider.tmp
	fi

	# Configure call return if enabled
	if [ -n "$callreturn_enabled" -a "$callreturn_enabled" = "1" ] ; then
		echo "exten => $call_return,1,	Macro(call_return,$1)" >>	$WORKDIR/extensions_provider.tmp
	fi
	
	# Configure redial if enabled
	if [ -n "$redial_enabled" -a "$redial_enabled" = "1" ] ; then
		echo "exten => $redial,1,	Macro(redial,$1)" >>	$WORKDIR/extensions_provider.tmp
	fi
	echo "" >>					$WORKDIR/extensions_provider.tmp

	cat $WORKDIR/extensions_provider.tmp >> 		$WORKDIR/extensions.tmp
	rm -f						$WORKDIR/extensions_provider.tmp

	# create direct dial extensions, if any are defined
	config_get direct_dial $1 direct_dial
	if [ -n "$direct_dial" ] ; then
		cp $TMPL_EXTENSIONS_DIRECT					$WORKDIR/extensions_direct.tmp
		sed -i "s/|PROVIDER|/$1/"					$WORKDIR/extensions_direct.tmp
		for i in $direct_dial ; do
			echo "Adding direct dial extension $i for $1"
			echo "exten => $i,1,Goto($1-outgoing,\${EXTEN},1)" >>	$WORKDIR/extensions_direct.tmp
		done
		echo "" >>							$WORKDIR/extensions_direct.tmp
		cat $WORKDIR/extensions_direct.tmp >> 				$WORKDIR/extensions.tmp
		rm -f								$WORKDIR/extensions_direct.tmp
	fi

	# create tempfile for incoming context
	tmp=$(mktemp)

	# check call filters for incoming calls
	call_filter_macro="Set(CALL_BLOCKED=0)"
	# check if call filter is enabled
	if [ "x$call_filter_enabled" = "x1" ] ; then
		call_filter_macro="Macro($call_filter-incoming-call-filter)"
	fi	

	echo "exten => $user,1,$call_filter_macro" >>						$tmp
	echo "exten => $user,n,GotoIf($[\"\${CALL_BLOCKED}\"=\"1\"]?blocked)" >>		$tmp

	local call_lines call_ivr call_queue oh_profile extension
	echo "exten => $user,n,Set(__TRANSFER_CONTEXT=transfer_\${CHANNEL(peername)})" >>	$tmp
	config_get call_lines $1 call_lines
	config_get call_queue $1 call_queue
	config_get call_ivr $1 call_ivr
	if ! [ -z $call_lines ] ; then
		# read a list of lines that should be dialled on incoming calls
		incoming_lines=$(read_lines $1)
		echo "exten => $user,n,Dial($incoming_lines,$DIAL_TIMEOUT)" >>		$tmp
	fi
	if ! [ -z $call_queue ] ; then
		# Get opening hours profile
		config_get oh_profile $call_queue opening_hours_profile
		config_get extension $call_queue extension
	fi
	if ! [ -z $call_ivr ] ; then
		# Get opening hours profile
		config_get oh_profile $call_ivr opening_hours_profile
		config_get extension $call_ivr extension
	fi
	if ! [ -z $oh_profile ] ; then
		local invert label
		config_get invert $oh_profile invert
		if [ "$invert" == "1" ] ; then
			label="closed"
		else
			label="open"
		fi
		# Find all timespans belonging to the opening hours profile
	        local section cfgtype
	        [ -z "$CONFIG_SECTIONS" ] && return 0
	        for section in ${CONFIG_SECTIONS}; do
	                config_get cfgtype "$section" TYPE
	                [ -n "timespan" -a "x$cfgtype" != "xtimespan" ] && continue
	                local owner
	
	                config_get owner $section owner
	                if [ "$owner" == "$oh_profile" ] ; then
	                        local tr dow dom months
	                        config_get tr $section time_range
	                        config_get dow $section days_of_week
	                        config_get dom $section days_of_month
	                        config_get months $section months
	
	                        echo "exten => $user,n,GotoIfTime($tr,$dow,$dom,$months,/usr/share/zoneinfo/CET?$label)" >> $tmp
	                fi
	        done
		if [ "$invert" == "0" ] ; then
			echo "exten => $user,n,Goto(closed)" >>					$tmp
		fi

	fi
	
	if [ -z $call_lines ] ; then
		# Connect calls to queue or IVR only during opening hours	
		echo "exten => $user,n(open),Goto(local_extensions,$extension,1)" >>		$tmp
		# Goto voicemail after hours
		echo "exten => $user,n(closed),NoOp()" >> 					$tmp
	fi

	# Check if voicemail is enabled
	local has_voicemail
	has_voicemail=$(mailbox_check_enabled $1)
	if [ "$has_voicemail" = "1" ] ; then
		echo "exten => $user,n,VoiceMail($user,u)" >>					$tmp
	fi
	echo "exten => $user,n,Goto(end)" >>							$tmp
	echo "exten => $user,n(blocked),Set(result=\${SHELL(/usr/lib/asterisk/log_call.sh Incoming \${CALLERID(num)} Blocked)})" >> $tmp
	echo "exten => $user,n,Playback(tt-monkeys)" >>						$tmp
	echo "exten => $user,n(end),Hangup()" >>						$tmp
	cat $tmp >>										$WORKDIR/extensions_incoming.tmp
	rm -f											$tmp
}

#
# Create a local extension for a BRCM Line
#
configure_brcm_line_extension()
{
	local line
	local extension

	line=${1:4}
	config_get extension $1 extension

	if [ -z "$line" ] ; then
		return
	fi

	if [ -z "$extension" ] ; then
		return
	fi

	mailbox_enabled=$(mailbox_check_enabled $1)

	echo "exten => $extension,1,Dial(BRCM/$line,$DIAL_TIMEOUT)"				>> $WORKDIR/extensions_local.tmp
	if [ "$mailbox_enabled" = "1" ] ; then
		echo "Enabling Mailbox for BRCM line $1"
		echo "exten => $extension,n,VoiceMail($extension,u)"	>> $WORKDIR/extensions_local.tmp
	fi
	echo "exten => $extension,n,Hangup()"						>> $WORKDIR/extensions_local.tmp
}

#
# Create a local extension for a SIP User
#
configure_sip_user_extension()
{
	local enabled
	local user
	local extension
	local mailbox_enabled

	config_get enabled $1 enabled
	config_get user $1 user
	config_get extension $1 extension

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	if [ -z "$user" ] ; then
		return
	fi

	if [ -z "$extension" ] ; then
		return
	fi

	mailbox_enabled=$(mailbox_check_enabled $1)

	echo "Configuring extension for SIP User $user"
	echo "exten => $extension,1,Dial(SIP/$user,$DIAL_TIMEOUT)"				>> $WORKDIR/extensions_local.tmp
	if [ "$mailbox_enabled" = "1" ] ; then
		echo "Enabling Mailbox for SIP User $user"
		echo "exten => $extension,n,VoiceMail($extension,u)"	>> $WORKDIR/extensions_local.tmp
	fi
	echo "exten => $extension,n,Hangup()"						>> $WORKDIR/extensions_local.tmp
}

configure_codecs()
{
	echo "Configuring codecs"
	local genericplc
	config_get genericplc BRCM genericplc
	sed -i "s/|PLC|/$genericplc/"			$WORKDIR/codecs.tmp
}

#
# Configure default settings for brcm.conf
#
configure_brcm()
{
	echo "Configuring BRCM"
	local country
	local jbenable
	local jbforce
	local jbmaxsize
	local jbimpl
	local dtmfcompatibility
	local dialoutmsec
	local cw_enable

	config_get country BRCM country
	config_get jbenable BRCM jbenable
	config_get jbforce BRCM jbforce
	config_get jbmaxsize BRCM jbmaxsize
	config_get jbimpl BRCM jbimpl
	config_get dtmfmode SIP dtmfmode
	config_get dialoutmsec BRCM dialoutmsec
	config_get cw_enable BRCM cw_enable

	if [ -z "$dialoutmsec" ] ; then
		dialoutmsec=3000
	fi

	if [ -z "$cw_enable" ] ; then
		cw_enable=yes
	fi

	sed -i "s/|COUNTRY|/$country/"				$WORKDIR/brcm.tmp
	sed -i "s/|JBENABLE|/$jbenable/"			$WORKDIR/brcm.tmp
	sed -i "s/|JBFORCE|/$jbforce/"				$WORKDIR/brcm.tmp
	sed -i "s/|JBMAXSIZE|/$jbmaxsize/"			$WORKDIR/brcm.tmp
	sed -i "s/|JBIMPL|/$jbimpl/"				$WORKDIR/brcm.tmp
	sed -i "s/|DIALOUTMSEC|/$dialoutmsec/"			$WORKDIR/brcm.tmp

	if [ "$dtmfmode" == "compatibility" ] ; then
		dtmfcompatibility="1"
	else
		dtmfcompatibility="0"
	fi
	sed -i "s/|DTMFCOMPATIBILITY|/$dtmfcompatibility/"      $WORKDIR/brcm.tmp
	sed -i "s/|CW_ENABLE|/$cw_enable/"			$WORKDIR/brcm.tmp
}

#
# Configure settings for individual line in brcm.conf
#
configure_brcm_line()
{
	echo "Configuring BRCM line $1"
	local sip_provider
	local ptime
	local silence
	local ecan
	local noise
	local jitter_fixed
	local jitter_min
	local jitter_max
	local jitter_target
	local txgain
	local rxgain
	local codecs
	local is_fax
	local dialtone_timeout

	config_get sip_provider $1 sip_provider
	config_get ptime $1 ptime
	config_get silence $1 vad
	config_get ecan $1 echo_cancel
	config_get noise $1 noise
	config_get jitter_fixed $1 jitter_fixed
	config_get jitter_min $1 jitter_min
	config_get jitter_max $1 jitter_max
	config_get jitter_target $1 jitter_target
	config_get txgain $1 txgain
	config_get rxgain $1 rxgain
	config_get dialtone_timeout $1 dialtone_timeout

	#If line is configured with no sip_provider, use local_extensions context
	local provider_enabled
	local provider_user
	if [ "$sip_provider" == "-" ] ; then
		sip_provider="local_extensions"
	else
		config_get provider_enabled $sip_provider enabled
		config_get provider_user $sip_provider user
		if [ -z "$provider_enabled" -o "$provider_enabled" = "0" -o -z "$provider_user" ] ; then
			sip_provider="local_extensions"
		else
			codecs=$(read_codecs $sip_provider)
		fi
	fi

	if [ -z "$is_fax" ] || [ "$is_fax" == "1" ] || [ -z "$codecs" ] ; then
		codecs="allow = ulaw\\nallow = alaw"
	fi

	if [ -z "$dialtone_timeout" ] ; then
		dialtone_timeout=20000
	fi

	cp $TMPL_BRCM_LINE $WORKDIR/brcm_line.tmp
	sed -i "s/|SECTION|/$1/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|CONTEXT|/$sip_provider/g"			$WORKDIR/brcm_line.tmp
	sed -i "s/|PERIOD|/$ptime/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|SILENCE|/$silence/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|ECHOCANCEL|/$ecan/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|COMFORTNOISE|/$noise/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERFIXED|/$jitter_fixed/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERMIN|/$jitter_min/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERMAX|/$jitter_max/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERTARGET|/$jitter_target/"		$WORKDIR/brcm_line.tmp
	sed -i "s/|TXGAIN|/$txgain/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|RXGAIN|/$rxgain/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|ALLOW|/$codecs/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|DIALTONE_EXTENSION_HINT|/$1/"		$WORKDIR/brcm_line.tmp
	sed -i "s/|DIALTONE_TIMEOUT|/$dialtone_timeout/"	$WORKDIR/brcm_line.tmp

	cat $WORKDIR/brcm_line.tmp >>				$WORKDIR/brcm.tmp
	rm -f							$WORKDIR/brcm_line.tmp
}

#
# Configure voicemail.conf
#
configure_voicemail()
{
	echo "Configuring Voice Mail"
	local extension

	config_get extension voicemail extension

	echo "exten => $extension,1,Answer(500)"				>> $WORKDIR/extensions_local.tmp
	echo "exten => $extension,n,VoiceMailMain(@default)"	>> $WORKDIR/extensions_local.tmp
}

configure_language()
{
	local voice_pack
	config_get voice_pack language voice_pack

	if [ -z "$voice_pack" ] ; then
		return
	fi

	if [ -f $voice_pack ]; then
		# Move voice-pack to /usr/lib/asterisk
		echo "Found new voice-pack"
		path="/usr/lib/asterisk"
		mv $voice_pack $path
		filename=$(basename $voice_pack)
		echo "Verifying voice-pack"
		# Check if valid gzip archive
		gunzip -t $path/$filename 2>/dev/null
		if [ $? -ne 0 ] ; then
			# Corrupt file or not a gzip archive
			echo "Corrupt or incorrectly compressed voice-pack"
			# Remove it
			rm $path/$filename
			return
		fi
		# Decompress
		mv $path/$filename $path/voicepack.tar.gz
		gunzip -f $path/voicepack.tar.gz 2>/dev/null
		if [ $? -ne 0 ] ; then
			# Decompress failed
			rm $path/voicepack.tar.gz
			return
		fi
		# Make sure the tarball contains just a directory named sounds
		valid=1
		listing=$(mktemp)
		tar -tf $path/voicepack.tar > $listing 2>/dev/null
		if [ $? -ne 0 ] ; then
			# Something went wrong
			echo "Voice-pack not a compressed tarball"
			rm $path/voicepack.tar
			return
		fi
		while read i
		do
			# Each file in listing should start with 'sounds/'
			if [ $(echo $i | sed 's/sounds\///') = $i ] ; then
				valid=0
				break
			fi
		done < $listing
		rm -f $listing
		if [ $valid -eq 0 ] ; then
			echo "Invalid voice-pack"
			rm $path/voicepack.tar
			return
		fi
		# Remove existing voice-pack
		echo "Permanently removing old voice-pack"
		rm -rf $path/sounds
		# Unpack
		echo "Installing voice-pack"
		tar -xf $path/voicepack.tar 2>/dev/null
		# Clean-up
		rm -f voicepack.tar voicepack.tar.gz
	fi
}

configure_moh()
{
	local sound_file
	config_get sound_file moh sound_file

	if [ -z "$sound_file" ] ; then
		return
	fi

	if [ -f $sound_file ]; then
		# Move sound file to /usr/lib/asterisk/moh
		echo "Found new MOH sound file"
		path="/usr/lib/asterisk/moh"
		mv $sound_file $path/music.gsm
		if [ $? == 0 ] ; then
			echo "Installed new MOH sound file as music.gsm"
		fi
	fi
}

#Create an extension "hint" to allow dialtone to be set according to sip provider reg status
create_extensions_dialtone()
{
	local sip_provider
	config_get sip_provider $1 sip_provider

	#If line is configured with an active sip account, setup dialtone extension
	if [ -n "$sip_provider" -a "$sip_provider" != "-" ] ; then
		config_get enabled $sip_provider enabled
		if [ -n "$enabled" -a "$enabled" = "1" ] ; then
			echo "exten => $1,hint,SIP/$sip_provider" >>     $WORKDIR/extensions_dialtone.tmp
		fi
	fi
}

# Makes sure the ownership of specified directories is proper.
pbx_fix_ownership()
{
	chown $ASTUSER:$ASTGROUP    $ASTDIRS
	chown $ASTUSER:$ASTGROUP -R $ASTDIRSRECURSIVE
}

#Load brcm line types and counts using the brcminfo util
lineType=""
for x in $(brcminfo)
do
	case $x in
		"DECT") lineType="dectCount" ;;
		"FXS") lineType="fxsCount" ;;
		"FXO") lineType="fxoCount" ;;
		"All") lineType="allCount" ;;
		[0-9]) eval "$lineType=$x" ;;
	esac
done

#
# Calculate a name for each brcm line, depending on port type
# and number. The name is used to make UI look better.
#
set_line_name()
{
	line_number=${1:4}
	if [ "$line_number" -lt "$dectCount" ] ; then
		uci_set voice_pbx $1 name "DECT $(( $line_number + 1 ))"
	elif [ "$line_number" -lt "$allCount" ] ; then
		uci_set voice_pbx $1 name "Tel $(( $line_number - $dectCount + 1 ))"
	else
		uci_set voice_pbx $1 name $1
	fi
}

#
# Configure settings for logger (console, messages, syslog)
#
configure_logger()
{
	echo "Configuring logger"
	local console
	local messages
	local syslog
	local syslog_facility
	
	config_get console LOG console
	config_get messages LOG messages
	config_get syslog LOG syslog
	config_get syslog_facility LOG syslog_facility

	if [ -z "$console" ] ; then
		console="notice,warning,errpr" 
	fi

	if [ -z "$messages" ] ; then
		messages="error"
	fi

	if [ -z "$syslog" ] ; then
		syslog=""
	fi

	if [ -z "$syslog_facility" ] ; then
		syslog_facility="local0"
	fi

	sed -i "s/|CONSOLE|/$console/"			$WORKDIR/logger.tmp
	sed -i "s/|MESSAGES|/$messages/"		$WORKDIR/logger.tmp
	sed -i "s/|SYSLOG|/$syslog/"			$WORKDIR/logger.tmp
	sed -i "s/|SYSLOG_FACILITY|/$syslog_facility/"	$WORKDIR/logger.tmp
}

start() {
	mkdir -p $WORKDIR
	# Load config file
	config_load voice_pbx

	########################################################
	# Set line names according to whats reported by brcminfo
	########################################################
	config_foreach set_line_name brcm_line
	uci_commit voice_pbx

	#######################################
	# Create temporary files from templates
	#######################################
	cp $TMPL_EXTENSIONS		$WORKDIR/extensions.tmp
	cp $TMPL_EXTENSIONS_INCOMING	$WORKDIR/extensions_incoming.tmp
	cp $TMPL_EXTENSIONS_LOCAL	$WORKDIR/extensions_local.tmp
	cp $TMPL_EXTENSIONS_DIALTONE	$WORKDIR/extensions_dialtone.tmp
	cp $TMPL_SIP			$WORKDIR/sip.tmp
	cp $TMPL_RTP			$WORKDIR/rtp.tmp
	cp $TMPL_STUN			$WORKDIR/res_stun_monitor.tmp
	cp $TMPL_BRCM			$WORKDIR/brcm.tmp
	cp $TMPL_CODECS			$WORKDIR/codecs.tmp
	cp $TMPL_VOICEMAIL		$WORKDIR/voicemail.tmp
	touch				$WORKDIR/sip_providers.tmp
	touch				$WORKDIR/sip_registrations.tmp
	touch				$WORKDIR/sip_users.tmp
	touch				$WORKDIR/features.tmp
	touch				$WORKDIR/call_filter_macros.tmp
	touch				$WORKDIR/ivrs.tmp

	###########################
	# Call Filter configuration
	###########################
	config_foreach configure_call_filter call_filter

	#########################
	# Dialplan configuration
	#########################
	configure_extensions

	############################
	# SIP Provider configuration
	############################
	config_foreach configure_sip sip_advanced
	config_foreach configure_sip_provider sip_service_provider
	config_foreach configure_direct_dial direct_dial
	config_foreach encrypt_password sip_service_provider
	config_foreach configure_extensions_provider sip_service_provider

	########################
	# SIP User configuration
	########################
	config_foreach configure_sip_user sip_user
	config_foreach configure_sip_user_extension sip_user

	#####################
	# BRCM configuration
	#####################
	configure_brcm
	config_foreach configure_brcm_line brcm_line
	config_foreach configure_brcm_line_extension brcm_line
	config_foreach create_extensions_dialtone brcm_line
	configure_codecs

	###########################
	# Voicemail configuration
	###########################
	configure_voicemail
	config_foreach configure_mailbox mailbox

	######
	# IVR 
	######
	config_foreach configure_ivr ivr

	##############
	# Call Queues
	##############
	config_foreach configure_queue queue

	###########
	# Language
	###########
	configure_language

	###############
	# Music on hold
	###############
	configure_moh

	####################
	# Log configuration
	####################
	cp $TMPL_LOGGER $WORKDIR/logger.tmp
	configure_logger

	#########################
	# Finish up configuration
	#########################
	cat $WORKDIR/ivrs.tmp >>		$WORKDIR/extensions.tmp
	cat $WORKDIR/call_filter_macros.tmp >>	$WORKDIR/extensions.tmp
	cat $WORKDIR/extensions_incoming.tmp >> $WORKDIR/extensions.tmp
	cat $WORKDIR/extensions_dialtone.tmp >> $WORKDIR/extensions.tmp
	cat $WORKDIR/extensions_local.tmp >> $WORKDIR/extensions.tmp
	rm -f $WORKDIR/extensions_incoming.tmp
	rm -f $WORKDIR/extensions_dialtone.tmp
	rm -f $WORKDIR/extensions_local.tmp
	assemble_and_copy_config
	pbx_fix_ownership
	config_unset
	return
}

restart() {
	start
}
