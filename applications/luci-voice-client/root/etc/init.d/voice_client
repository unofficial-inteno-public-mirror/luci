#!/bin/sh /etc/rc.common
#
# This file is part of luci-app-voice-client,
# its purpose is to (re)create asterisk configuration files
# from luci config file(s).
#
# Based on luci-pbx package
# Copyright 2011 Iordan Iordanov <iiordanov (AT) gmail.com>
#
#    This file is part of luci-pbx.
#
#    luci-pbx is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    luci-pbx is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with luci-pbx.  If not, see <http://www.gnu.org/licenses/>.

. /lib/functions.sh

START=60

# Some global variables
SERIAL=$(cat /proc/nvram/SerialNumber)
BASEMAC=$(cat /proc/nvram/BaseMacAddr | sed 's/ //g')
MODULENAME=voice
USERAGENT="Inteno_${SERIAL}_${BASEMAC}"

ASTUSER=nobody
ASTGROUP=nogroup
ASTDIRSRECURSIVE="/var/run/asterisk /var/log/asterisk /var/spool/asterisk"
ASTDIRS="/usr/lib/asterisk"

TEMPLATEDIR=/etc/asterisk_templates
ASTERISKDIR=/etc/asterisk
WORKDIR=/tmp/$MODULENAME.$$
MD5SUMSFILE=/tmp/$MODULENAME-sums.$$

#TODO: go through templates, check usage

TMPL_EXTENSIONS=$TEMPLATEDIR/extensions.conf.TEMPLATE
TMPL_EXTENSIONS_EXTRA=$TEMPLATEDIR/extensions_extra.conf.TEMPLATE
TMPL_EXTENSIONS_MACRO=$TEMPLATEDIR/extensions_macro.conf.TEMPLATE
TMPL_EXTENSIONS_ACCOUNT=$TEMPLATEDIR/extensions_account.TEMPLATE
TMPL_EXTENSIONS_INCOMING=$TEMPLATEDIR/extensions_incoming.TEMPLATE
TMPL_EXTENSIONS_INCOMING_LINE=$TEMPLATEDIR/extensions_incoming_line.TEMPLATE
TMPL_EXTENSIONS_LOCAL=$TEMPLATEDIR/extensions_local.TEMPLATE
TMPL_EXTENSIONS_DIRECT=$TEMPLATEDIR/extensions_direct.TEMPLATE

TMPL_SIP=$TEMPLATEDIR/sip.conf.TEMPLATE
TMPL_SIPPEER=$TEMPLATEDIR/sip_peer.TEMPLATE
TMPL_SIPPEERSEC=$TEMPLATEDIR/sip_peer_voicesec.TEMPLATE
TMPL_SIPREG=$TEMPLATEDIR/sip_registration.TEMPLATE
TMPL_SIPREGSEC=$TEMPLATEDIR/sip_registration_voicesec.TEMPLATE
TMPL_RTP=$TEMPLATEDIR/rtp.conf.TEMPLATE

TMPL_ASTERISK=$TEMPLATEDIR/asterisk.conf.TEMPLATE
TMPL_INDICATIONS=$TEMPLATEDIR/indications.conf.TEMPLATE
TMPL_LOGGER=$TEMPLATEDIR/logger.conf.TEMPLATE
TMPL_MANAGER=$TEMPLATEDIR/manager.conf.TEMPLATE
TMPL_MODULES=$TEMPLATEDIR/modules.conf.TEMPLATE
TMPL_FEATURES=$TEMPLATEDIR/features.conf.TEMPLATE
TMPL_CODECS=$TEMPLATEDIR/codecs.conf.TEMPLATE
TMPL_MUSICONHOLD=$TEMPLATEDIR/musiconhold.conf.TEMPLATE

TMPL_BRCM=$TEMPLATEDIR/brcm.conf.TEMPLATE
TMPL_BRCM_LINE=$TEMPLATEDIR/brcm_line.TEMPLATE

# Gets rid of any config files from $ASTERISKDIR not found in $WORKDIR.
clean_up_asterisk_config_dir()
{
        for f in $ASTERISKDIR/* ; do
                basef="`basename $f`"
                if [ ! -e "$WORKDIR/$basef" ] ; then
                        rm -rf "$f"
			echo "$f" >> /tmp/voice_client.log
                fi
        done
}

# Compares md5sums of the config files in $WORKDIR to those
# in $ASTERISKDIR, and copies only changed files over to reduce
# wear on flash in embedded devices.
compare_configs_and_copy_changed()
{
	# First, compute md5sums of the config files in $WORKDIR.
	cd $WORKDIR/
	md5sum * > $MD5SUMSFILE

	# Now, check the files in $ASTERISKDIR against the md5sums.
	cd $ASTERISKDIR/
	changed_files="`md5sum -c $MD5SUMSFILE 2>/dev/null | fgrep ": FAILED" | awk -F: '{print $1}'`"

	rm -f $MD5SUMSFILE

	[ -z "$changed_files" ] && return

	# Now copy over the changed files.
	for f in $changed_files ; do
		cp "$WORKDIR/$f" "$ASTERISKDIR/$f"
	done
}

# Calls the functions that create the final config files
# Calls the function which compares which files have changed
# Puts the final touches on $ASTERISKDIR
# Gets rid of $WORKDIR
assemble_and_copy_config()
{
	mkdir -p $ASTERISKDIR

	# Touch all the included files, to prevent asterisk from refusing to
	# start if a config item is missing and an included config file isn't created.

	# Copy the template files which we don't edit.
	cp $TMPL_ASTERISK		$WORKDIR/asterisk.conf
	cp $TMPL_INDICATIONS		$WORKDIR/indications.conf
        cp $TMPL_LOGGER			$WORKDIR/logger.conf
	cp $TMPL_MANAGER		$WORKDIR/manager.conf
	cp $TMPL_MODULES		$WORKDIR/modules.conf
	cp $TMPL_EXTENSIONS_MACRO	$WORKDIR/extensions_macro.conf
	cp $TMPL_MUSICONHOLD		$WORKDIR/musiconhold.conf

	# Handle extensions_extra, carry over old file to new config if there is one
	if [ -e "$ASTERISKDIR/extensions_extra.conf" ] ; then
		cp $ASTERISKDIR/extensions_extra.conf	$WORKDIR/extensions_extra.conf
	else
		cp $TMPL_EXTENSIONS_EXTRA		$WORKDIR/extensions_extra.conf
	fi

	# Create config files from the temporary files we have built
	mv $WORKDIR/sip.tmp			$WORKDIR/sip.conf
	mv $WORKDIR/sip_registrations.tmp	$WORKDIR/sip_registrations.conf
	mv $WORKDIR/sip_peers.tmp		$WORKDIR/sip_peers.conf
	mv $WORKDIR/brcm.tmp			$WORKDIR/brcm.conf
	mv $WORKDIR/extensions.tmp		$WORKDIR/extensions.conf
	mv $WORKDIR/codecs.tmp			$WORKDIR/codecs.conf
	mv $WORKDIR/rtp.tmp			$WORKDIR/rtp.conf
	mv $WORKDIR/features.tmp		$WORKDIR/features.conf

	# At this point, $WORKDIR should contain a complete, working config.
	clean_up_asterisk_config_dir

	compare_configs_and_copy_changed

	[ ! -d $ASTERISKDIR/manager.d ] && mkdir -p $ASTERISKDIR/manager.d/

	# Get rid of the working directory
	rm -rf $WORKDIR
}


# read configured codecs for a Line section
# returns a list of found codecs, formatted to replace a tag with sed
read_codecs()
{
	local codec_allow=""
	local codec

	for i in 0 1 2 3 4 5; do
		config_get codec "$1" "codec$i"
		if [ "$codec" == "-" ] || [ -z "$codec" ]; then
			break
		fi
		codec_allow=$codec_allow"allow = $codec\\n"
	done
	echo $codec_allow
}

# read lines that should receive incoming calls from
# a SIP account.
# returns a list of lines, formatted to replace a tag with sed
# in a Dial() command
read_lines()
{
	local lines=""
	local call_lines
	config_get call_lines $1 call_lines
	for i in $call_lines ; do
		lines=$lines"BRCM\/$i\&"
	done
	echo "${lines%??}"
}

# Read BRCM lines that should receive incoming calls for
# a SIP account. Append line number to SIP user (second argument) 
# to create a contact string. This string (user_XYZ) will then be
# used as extension in:
# "register => user[:secret[:authuser]]@host[:port][/extension]"
format_sip_contact()
{
	local lines=""
	local call_lines
	config_get call_lines $1 call_lines
	for i in $call_lines ; do
		lines=$lines"$i"
	done
	if [ -n "$lines" ]; then
		lines="_$lines"
	fi
	lines=$2$lines	
	echo $lines
}

configure_sip()
{
	echo "Configuring SIP"
	local useragent
	local externhost
	local bindport
	local rtpstart
	local rtpend
	local dtmfmode
	local blindxfer
	local registertimeout
	local registerattempts
	local remotehold
	local tos_sip
	local tos_audio
	local tos_video
	local tos_text

	config_get useragent $1 useragent
	config_get externhost $1 externhost
	config_get bindport $1 bindport
	config_get rtpstart $1 rtpstart
	config_get rtpend $1 rtpend
	config_get dtmfmode $1 dtmfmode
	config_get blindxfer $1 blindxfer
	config_get registertimeout $1 registertimeout
	config_get registerattempts $1 registerattempts
	config_get remotehold $1 remotehold
	config_get tos_sip $1 tos_sip
	config_get tos_audio $1 tos_audio
	config_get tos_video $1 tos_video
	config_get tos_text $1 tos_text

	[ -z "$useragent" ] && useragent="$USERAGENT"

	sed -i "s/|USERAGENT|/$useragent/g"		$WORKDIR/sip.tmp
	sed -i "s/|DTMFMODE|/$dtmfmode/"		$WORKDIR/sip.tmp

	if [ -z "$externhost" ] ; then
		sed -i "s/externhost=|EXTERNHOST|/;externhost=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|EXTERNHOST|/$externhost/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$bindport" ] ; then
		sed -i "s/bindport=|BINDPORT|/;bindport=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|BINDPORT|/$bindport/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$registertimeout" ] ; then
		sed -i "s/registertimeout=|REGISTERTIMEOUT|/;registertimeout=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|REGISTERTIMEOUT|/$registertimeout/g"				$WORKDIR/sip.tmp
	fi

	if [ -z "$registerattempts" ] ; then
		sed -i "s/registerattempts=|REGISTERATTEMPTS|/;registerattempts=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|REGISTERATTEMPTS|/$registerattempts/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$remotehold" ] ; then
		sed -i "s/remotehold=|REMOTEHOLD|/;remotehold=/g"			$WORKDIR/sip.tmp
	else
		sed -i "s/|REMOTEHOLD|/$remotehold/g"					$WORKDIR/sip.tmp
	fi


	# Set Differentiated Services values (optional)
	if [ -z "$tos_sip" ] ; then
		sed -i "s/tos_sip=|TOS_SIP|/;tos_sip=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_SIP|/$tos_sip/g"			$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_audio" ] ; then
		sed -i "s/tos_audio=|TOS_AUDIO|/;tos_audio=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_AUDIO|/$tos_audio/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_video" ] ; then
		sed -i "s/tos_video=|TOS_VIDEO|/;tos_video=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_VIDEO|/$tos_video/g"		$WORKDIR/sip.tmp
	fi

	if [ -z "$tos_text" ] ; then
		sed -i "s/tos_text=|TOS_TEXT|/;tos_text=/g"	$WORKDIR/sip.tmp
	else
		sed -i "s/|TOS_TEXT|/$tos_text/g"		$WORKDIR/sip.tmp
	fi

	# Set RTP port range
	
	sed -i "s/|RTPSTART|/$rtpstart/"		$WORKDIR/rtp.tmp
	sed -i "s/|RTPEND|/$rtpend/"			$WORKDIR/rtp.tmp

	# Set blind transfer key
	cp $TMPL_FEATURES				$WORKDIR/features.tmp
	sed -i "s/|BLINDXFER|/$blindxfer/"		$WORKDIR/features.tmp
}


#
# Add a single account to sip_peers and sip_registrations based on provided input:
# configure_account(name, user, secret, domain, host, codecline)
#
configure_sip_account()
{
	local enabled
	local domain
	local host
	local port
	local outboundproxy
	local outboundproxyport
	local user
	local authuser
	local secret
	local is_fax

	config_get enabled $1 enabled
	config_get domain $1 domain
	config_get host $1 host
	config_get port $1 port
	config_get outboundproxy $1 outboundproxy
	config_get outboundproxyport $1 outboundproxyport
	config_get user $1 user
	config_get authuser $1 authuser
	config_get secret $1 secret
	config_get is_fax $1 is_fax

	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	if [ -z "$user" ] ; then
		echo "SIP account $1 has no user configured, ignored"
		return
	fi

	echo "Configuring SIP account $1"

	if [ -z "$host" ] ; then
		host=$domain
	fi

	# Select register template based on precence of voicesec util
	if [ -e /usr/bin/voicesec ] ; then
		cp "$TMPL_SIPPEERSEC" "$WORKDIR/sip_peer.tmp"
		cp "$TMPL_SIPREGSEC" "$WORKDIR/sip_reg.tmp"
	else
		cp "$TMPL_SIPPEER" "$WORKDIR/sip_peer.tmp"
		cp "$TMPL_SIPREG" "$WORKDIR/sip_reg.tmp"
	fi

	# Construct a sip peer entry for account
	sed -i "s/|NAME|/$1/g"				$WORKDIR/sip_peer.tmp
	sed -i "s/|AUTHUSER|/$authuser/g"		$WORKDIR/sip_peer.tmp
	sed -i "s/|USER|/$user/"			$WORKDIR/sip_peer.tmp
	sed -i "s/|SECRET|/$secret/"			$WORKDIR/sip_peer.tmp
	sed -i "s/|HOST|/$host/"			$WORKDIR/sip_peer.tmp
	sed -i "s/|FROMDOMAIN|/$domain/"		$WORKDIR/sip_peer.tmp

	# Set or remove port
	if [ -z "$port" ] ; then
		sed -i "s/port=|PORT|//g"		$WORKDIR/sip_peer.tmp
	else
		sed -i "s/|PORT|/$port/g"		$WORKDIR/sip_peer.tmp
	fi

	# Set or remove outboundproxy
	if [ -z "$outboundproxy" ] ; then
		sed -i "s/outboundproxy=|OUTBOUNDPROXY|//g"	$WORKDIR/sip_peer.tmp
	else
		sed -i "s/|OUTBOUNDPROXY|/$outboundproxy/g"	$WORKDIR/sip_peer.tmp
	fi

	# Set or remove outboundproxyport
	if [ -z "$outboundproxyport" ] ; then
		sed -i "s/|OUTBOUNDPROXYPORT|//g"	$WORKDIR/sip_peer.tmp
	else
		sed -i "s/|OUTBOUNDPROXYPORT|/:$outboundproxyport/g"	$WORKDIR/sip_peer.tmp
	fi

	# Force ulaw/alaw if fax, otherwise read selected codecs
	if [ -z "$is_fax" -o "$is_fax" = "1" ] ; then
		sed -i "s/|ALLOW|/allow = ulaw\nallow = alaw/"	$WORKDIR/sip_peer.tmp
	else
		sed -i "s/|ALLOW|/$(read_codecs $1)/"		$WORKDIR/sip_peer.tmp
	fi

	# Add account configuration to the temp file containing all account configs.
	cat $WORKDIR/sip_peer.tmp >> $WORKDIR/sip_peers.tmp

	# Register account with SIP Service Provider
	sed -i "s/|ACCOUNT|/$1/g"			$WORKDIR/sip_reg.tmp	
	sed -i "s/|USER|/$user/g"			$WORKDIR/sip_reg.tmp
	sed -i "s/|SECRET|/$secret/"			$WORKDIR/sip_reg.tmp
	if [ -n "$authuser" ] ; then
		sed -i "s/|AUTHUSER|/:$authuser/"	$WORKDIR/sip_reg.tmp
	else
		sed -i "s/|AUTHUSER|//"			$WORKDIR/sip_reg.tmp
	fi
	if [ -n "$port" ] ; then
		sed -i "s/|PORT|/:$port/"		$WORKDIR/sip_reg.tmp
	else
		sed -i "s/|PORT|//"			$WORKDIR/sip_reg.tmp
	fi
	sed -i "s/|CONTACT_USER|/$(format_sip_contact $1 $user)/g"	$WORKDIR/sip_reg.tmp

	# Add account registration info to temp file containing all account registrations
	cat $WORKDIR/sip_reg.tmp >> $WORKDIR/sip_registrations.tmp

	# Clean up temporary files
	rm -f $WORKDIR/sip_peer.tmp
	rm -f $WORKDIR/sip_reg.tmp
}

#Encrypt passwords if voicesec is used
encrypt_password()
{
	local secret
	config_get secret $1 secret

	if [ -n "$secret" ] && [ -e /usr/bin/voicesec ] ; then
		echo "Encrypting password for $1"
		/usr/bin/voicesec -e $secret > /usr/lib/asterisk/voicesec_$1
		uci_remove voice_client $1 secret
		uci_commit voice_client
	fi
}

#
# Create extensions.tmp and configure general dialplan settings
#
create_extensions()
{
	echo "Configuring dialplan"
	local custom_incoming_enabled
	local custom_hangup_enabled
	local callforward_enabled
	config_get custom_incoming_enabled custom_dialplan custom_incoming_enabled
	config_get custom_hangup_enabled custom_dialplan custom_hangup_enabled
	config_get callforward_enabled features callforward_enabled

	if [ -z "$custom_incoming_enabled" -o "$custom_incoming_enabled" = "0" ] ; then
		sed -i "s/|CUSTOM_INCOMING|/NoOp()/"					$WORKDIR/extensions.tmp
	else
		sed -i "s/|CUSTOM_INCOMING|/Macro(custom-incoming)/"			$WORKDIR/extensions.tmp
	fi

	if [ -z "$custom_hangup_enabled" -o "$custom_hangup_enabled" = "0" ] ; then
		sed -i "s/|CUSTOM_HANGUP|/Playback(beep)/"				$WORKDIR/extensions.tmp
	else
		sed -i "s/|CUSTOM_HANGUP|/Macro(custom-hangup)/"			$WORKDIR/extensions.tmp
	fi

	if [ -n "$callforward_enabled" -a "$callforward_enabled" = "1" ] ; then
		sed -i "s/|INCOMING_HANDLER|/Macro(callhandler,\${CHANNEL(peername)})/"	$WORKDIR/extensions.tmp
	else
		sed -i "s/|INCOMING_HANDLER|/Goto(call_line,\${EXTEN},1))/"		$WORKDIR/extensions.tmp
	fi
}

#
# Create dialplan settings for each enabled SIP-account
#
create_extensions_account()
{
	local enabled
	local displayname
	local user
	local cbbs_key
	local cbbs_maxretry
	local cbbs_retrytime
	local cbbs_waittime
	local cfim_on
	local cfim_off
	local cfbs_on
	local cfbs_off
	local call_return
	local redial
	local custom_outgoing
	local incoming_lines
	local direct_dial

	local callforward_enabled
	local cbbs_enabled
	local callreturn_enabled
	local redial_enabled	

	# load general settings
	config_get callforward_enabled "features" callforward_enabled
	config_get cbbs_enabled "features" cbbs_enabled
	config_get callreturn_enabled "features" callreturn_enabled
	config_get redial_enabled "features" redial_enabled

	# check if account is disabled
	config_get enabled $1 enabled
	if [ -z "$enabled" -o "$enabled" = "0" ] ; then
		return
	fi

	# check that account has a configured user
	config_get user $1 user
	if [ -z "$user" ] ; then
		return
	fi

	echo "Configuring dialplan for $1"

	config_get displayname $1 displayname
	[ -z "$displayname" ] && displayname=$user
	config_get custom_outgoing custom_dialplan custom_outgoing_enabled
	if [ -z "$custom_outgoing" -o "$custom_outgoing" = "0" ] ; then
		custom_outgoing="NoOp()"
	else
		custom_outgoing="Macro(custom-outgoing)"
	fi

	# load cbbs settings if enabled
	if [ -z "$cbbs_enabled" -o "$cbbs_enabled" = "0" ] ; then
		cbbs_key=""
		cbbs_maxretry="0"
		cbbs_retrytime="0"
		cbbs_waittime="0"
	else
		config_get cbbs_key $1 cbbs_key
		config_get cbbs_maxretry $1 cbbs_maxretry
		config_get cbbs_retrytime $1 cbbs_retrytime
		config_get cbbs_waittime $1 cbbs_waittime
	fi

	# load call forwarding etc settings
	config_get cfim_on $1 cfim_on
	config_get cfim_off $1 cfim_off
	config_get cfbs_on $1 cfbs_on
	config_get cfbs_off $1 cfbs_off
	config_get call_return $1 call_return
	config_get redial $1 redial

	local cfim_on_len=${#cfim_on}
	local cfbs_on_len=${#cfbs_on}
	[ -z "$cfim_on" ] && cfim_on="cfimon"
	[ -z "$cfim_off" ] && cfim_off="cfimoff"
	[ -z "$cfbs_on" ] && cfbs_on="cfbson"
	[ -z "$cfbs_off" ] && cfbs_off="cfbsoff"
	[ -z "$call_return" ] && call_return="callreturn"
	[ -z "$redial" ] && redial="redial"

	# create tempfile for outgoing, transfer and callforwarding contexts
	cp $TMPL_EXTENSIONS_ACCOUNT			$WORKDIR/extensions_account.tmp
	
	#common settings
	sed -i "s/|ACCOUNT|/$1/g"			$WORKDIR/extensions_account.tmp
	sed -i "s/|CUSTOM_OUTGOING|/$custom_outgoing/"	$WORKDIR/extensions_account.tmp
	sed -i "s/|DISPLAYNAME|/$displayname/"		$WORKDIR/extensions_account.tmp

	#cbbs settings
	sed -i "s/|CBBS_KEY|/$cbbs_key/"		$WORKDIR/extensions_account.tmp
	sed -i "s/|MAX_RETRIES|/$cbbs_maxretry/"	$WORKDIR/extensions_account.tmp
	sed -i "s/|RETRYTIME|/$cbbs_retrytime/"		$WORKDIR/extensions_account.tmp
	sed -i "s/|WAITTIME|/$cbbs_waittime/"		$WORKDIR/extensions_account.tmp

	# Confifure call forwarding if enabled
	if [ -n "$callforward_enabled" -a "$callforward_enabled" = "1" ] ; then
		echo "exten => $cfim_on,1,	Macro(create_cfim,$1,\${REPLACE(EXTEN:$cfim_on_len,*#-)})" >>	$WORKDIR/extensions_account.tmp
		echo "exten => $cfim_off,1,	Macro(delete_cfim,$1)" >>					$WORKDIR/extensions_account.tmp
		echo "exten => $cfbs_on,1,	Macro(create_cfbs,$1,\${REPLACE(EXTEN:$cfbs_on_len,*#-)})" >>	$WORKDIR/extensions_account.tmp
		echo "exten => $cfbs_off,1,	Macro(delete_cfbs,$1)" >>					$WORKDIR/extensions_account.tmp
	fi

	# Configure call return if enabled
	if [ -n "$callreturn_enabled" -a "$callreturn_enabled" = "1" ] ; then
		echo "exten => $call_return,1,	Macro(call_return,$1)" >>	$WORKDIR/extensions_account.tmp
	fi
	
	# Configure redial if enabled
	if [ -n "$redial_enabled" -a "$redial_enabled" = "1" ] ; then
		echo "exten => $redial,1,	Macro(redial,$1)" >>	$WORKDIR/extensions_account.tmp
	fi
	echo "" >>					$WORKDIR/extensions_account.tmp

	cat $WORKDIR/extensions_account.tmp >> 		$WORKDIR/extensions.tmp
	rm -f						$WORKDIR/extensions_account.tmp

	# create direct dial extensions, if any are defined
	config_get direct_dial $1 direct_dial
	if [ -n "$direct_dial" ] ; then
		cp $TMPL_EXTENSIONS_DIRECT					$WORKDIR/extensions_direct.tmp
		sed -i "s/|ACCOUNT|/$1/"					$WORKDIR/extensions_direct.tmp
		for i in $direct_dial ; do
			echo "Adding direct dial extension $i for $1"
			echo "exten => $i,1,Goto($1-outgoing,\${EXTEN},1)" >>	$WORKDIR/extensions_direct.tmp
		done
		echo "" >>							$WORKDIR/extensions_direct.tmp
		cat $WORKDIR/extensions_direct.tmp >> 				$WORKDIR/extensions.tmp
		rm -f								$WORKDIR/extensions_direct.tmp
	fi

	# read a list of lines that should be dialled on incoming calls
	incoming_lines=$(read_lines $1)

	# create tempfile for incoming context
	cp $TMPL_EXTENSIONS_INCOMING_LINE				$WORKDIR/extensions_incoming_line.tmp
	sed -i "s/|CONTACT_USER|/$(format_sip_contact $1 $user)/g"	$WORKDIR/extensions_incoming_line.tmp
	sed -i "s/|LINES|/$incoming_lines/"				$WORKDIR/extensions_incoming_line.tmp
	cat $WORKDIR/extensions_incoming_line.tmp >>			$WORKDIR/extensions_incoming.tmp
	rm -f								$WORKDIR/extensions_incoming_line.tmp
}

create_extensions_local()
{
	echo "Configuring local extensions"
	local extension_all_ports
	local test_audio_extension
	local test_echo_extension
	local all_lines="BRCM/0&BRCM/1&BRCM/2&BRCM/3&BRCM/4&BRCM/5&BRCM/6"
	config_get extension_all_ports custom_dialplan all_ports_extension
	config_get test_audio_extension custom_dialplan test_audio_extension
	config_get test_echo_extension custom_dialplan test_echo_extension

	if [ -n "$extension_all_ports" ] ; then
		echo "exten => $extension_all_ports,1,Dial($all_lines)"		>> $WORKDIR/extensions_local.tmp
		echo "exten => $extension_all_ports,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
	fi
	if [ -n "$test_audio_extension" ] ; then
		echo "exten => $test_audio_extension,1,Playback(tt-monkeys)"	>> $WORKDIR/extensions_local.tmp
		echo "exten => $test_audio_extension,n,Hangup()"		>> $WORKDIR/extensions_local.tmp
	fi
	if [ -n "$test_echo_extension" ] ; then
		echo "exten => $test_echo_extension,1,Echo()"			>> $WORKDIR/extensions_local.tmp
		echo "exten => $test_echo_extension,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
	fi

	#Add extensions for all brcm lines (up to 10)
	local extension
	for i in 0 1 2 3 4 5 6 7 8 9 ; do
		config_get extension "brcm$i" extension
		if [ -n "$extension" ] ; then
			echo "exten => $extension,1,Dial(BRCM/$i)"		>> $WORKDIR/extensions_local.tmp
			echo "exten => $extension,n,Hangup()"			>> $WORKDIR/extensions_local.tmp
		fi
	done
}

configure_codecs()
{
	echo "Configuring codecs"
	local genericplc
	config_get genericplc BRCM genericplc
	sed -i "s/|PLC|/$genericplc/"			$WORKDIR/codecs.tmp
}

#
# Configure default settings for brcm.conf
#
configure_brcm()
{
	echo "Configuring BRCM"
	local country
	local dtmfmode
	local jbenable
	local jbforce
	local jbmaxsize
	local jbimpl

	config_get country BRCM country
	config_get dtmfmode SIP dtmfmode 
	config_get jbenable BRCM jbenable
	config_get jbforce BRCM jbforce
	config_get jbmaxsize BRCM jbmaxsize
	config_get jbimpl BRCM jbimpl

	sed -i "s/|COUNTRY|/$country/"				$WORKDIR/brcm.tmp
	sed -i "s/|DTMFRELAY|/$dtmfmode/"			$WORKDIR/brcm.tmp
	sed -i "s/|JBENABLE|/$jbenable/"			$WORKDIR/brcm.tmp
	sed -i "s/|JBFORCE|/$jbforce/"				$WORKDIR/brcm.tmp
	sed -i "s/|JBMAXSIZE|/$jbmaxsize/"			$WORKDIR/brcm.tmp
	sed -i "s/|JBIMPL|/$jbimpl/"				$WORKDIR/brcm.tmp
}

#
# Configure settings for individual line in brcm.conf
#
configure_brcm_line()
{
	echo "Configuring BRCM line $1"
	local sip_account
	local ptime
	local silence
	local ecan
	local noise
	local jitter_fixed
	local jitter_min
	local jitter_max
	local jitter_target
	local txgain
	local rxgain

	config_get sip_account $1 sip_account
	config_get ptime $1 ptime
	config_get silence $1 vad
	config_get ecan $1 echo_cancel
	config_get noise $1 noise
	config_get jitter_fixed $1 jitter_fixed
	config_get jitter_min $1 jitter_min
	config_get jitter_max $1 jitter_max
	config_get jitter_target $1 jitter_target
	config_get txgain $1 txgain
	config_get rxgain $1 rxgain

	#If line is configured with no sip_account, use local_extensions context
	if [ "$sip_account" == "-" ] ; then
		sip_account="local_extensions"
	fi

	cp $TMPL_BRCM_LINE $WORKDIR/brcm_line.tmp
	sed -i "s/|SECTION|/$1/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|CONTEXT|/$sip_account/g"			$WORKDIR/brcm_line.tmp
	sed -i "s/|PERIOD|/$ptime/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|SILENCE|/$silence/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|ECHOCANCEL|/$ecan/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|COMFORTNOISE|/$noise/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERFIXED|/$jitter_fixed/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERMIN|/$jitter_min/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERMAX|/$jitter_max/"			$WORKDIR/brcm_line.tmp
	sed -i "s/|JITTERTARGET|/$jitter_target/"		$WORKDIR/brcm_line.tmp
	sed -i "s/|TXGAIN|/$txgain/"				$WORKDIR/brcm_line.tmp
	sed -i "s/|RXGAIN|/$rxgain/"				$WORKDIR/brcm_line.tmp	

	#Configure BRCM line with codecs according to the SIP line settings
	local is_fax
	config_get is_fax $sip_account is_fax
	if [ -z "$is_fax" -o "$is_fax" = "1" ] ; then
		sed -i "s/|ALLOW|/allow = ulaw\nallow = alaw/"	$WORKDIR/brcm_line.tmp
	else
		sed -i "s/|ALLOW|/$(read_codecs $sip_account)/"	$WORKDIR/brcm_line.tmp
	fi

	cat $WORKDIR/brcm_line.tmp >>				$WORKDIR/brcm.tmp
	rm -f							$WORKDIR/brcm_line.tmp
}

# Makes sure the ownership of specified directories is proper.
pbx_fix_ownership()
{
	chown $ASTUSER:$ASTGROUP    $ASTDIRS
	chown $ASTUSER:$ASTGROUP -R $ASTDIRSRECURSIVE
}

#Load brcm line types and counts using the brcminfo util
lineType=""
for x in $(brcminfo)
do
	case $x in
		"DECT") lineType="dectCount" ;;
		"FXS") lineType="fxsCount" ;;
		"FXO") lineType="fxoCount" ;;
		"All") lineType="allCount" ;;
		[0-9]) eval "$lineType=$x" ;;
	esac
done

#
# Calculate a name for each brcm line, depending on port type
# and number. The name is used to make UI look better.
#
set_line_name()
{
	line_number=${1:4}
	if [ "$line_number" -lt "$dectCount" ] ; then
		uci_set voice_client $1 name "DECT $(( $line_number + 1 ))"
	elif [ "$line_number" -lt "$allCount" ] ; then
		uci_set voice_client $1 name "Tel $(( $line_number - $dectCount + 1 ))"
	else
		uci_set voice_client $1 name $1
	fi
}

start() {
	mkdir -p $WORKDIR
	# Load config file
	config_load voice_client

	########################################################
	# Set line names according to whats reported by brcminfo
	########################################################
	config_foreach set_line_name brcm_line
	uci_commit voice_client

	#########################
	# Dialplan configuration
	#########################
	cp $TMPL_EXTENSIONS		$WORKDIR/extensions.tmp
	cp $TMPL_EXTENSIONS_INCOMING	$WORKDIR/extensions_incoming.tmp
	cp $TMPL_EXTENSIONS_LOCAL	$WORKDIR/extensions_local.tmp
	create_extensions
	config_foreach create_extensions_account sip_service_provider
	create_extensions_local
	cat $WORKDIR/extensions_incoming.tmp >> $WORKDIR/extensions.tmp
	cat $WORKDIR/extensions_local.tmp >> $WORKDIR/extensions.tmp
	rm -f $WORKDIR/extensions_incoming.tmp
	rm -f $WORKDIR/extensions_local.tmp

	####################
	# SIP configuration
	####################
	cp $TMPL_SIP $WORKDIR/sip.tmp
	touch $WORKDIR/sip_peers.tmp
	touch $WORKDIR/sip_registrations.tmp
	cp $TMPL_RTP $WORKDIR/rtp.tmp
	touch $WORKDIR/features.tmp

	config_foreach configure_sip sip_advanced
	config_foreach configure_sip_account sip_service_provider
	config_foreach configure_direct_dial direct_dial
	config_foreach encrypt_password sip_service_provider

	#####################
	# BRCM configuration
	#####################
	cp $TMPL_BRCM $WORKDIR/brcm.tmp
	cp $TMPL_CODECS $WORKDIR/codecs.tmp
	configure_brcm
	config_foreach configure_brcm_line brcm_line
	configure_codecs

	#########################
	# Finish up configuration
	#########################
	assemble_and_copy_config
	pbx_fix_ownership
	config_unset
	return
}

restart() {
	start
}
